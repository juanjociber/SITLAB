
App.js: Este será el componente principal que contendrá todos los demás componentes.
SeccionDNI.js: Componente para la sección de ingreso del DNI y botones de asistencia/refrigerio.
SeccionInformacion.js: Componente para mostrar la información del usuario.
SeccionRegistro.js: Componente para el registro de actividades.
SeccionHoraFecha.js: Componente para mostrar la hora y fecha actual.

1. App.js
import React, { useState } from 'react';
import './App.css';
import SeccionDNI from './SeccionDNI';
import SeccionInformacion from './SeccionInformacion';
import SeccionRegistro from './SeccionRegistro';
import SeccionHoraFecha from './SeccionHoraFecha';
import Modal from './Modal';

function App() {
  const [codigo, setCodigo] = useState('');
  const [nombre, setNombre] = useState('');
  const [apellido, setApellido] = useState('');
  const [dni, setDni] = useState('');
  const [cargo, setCargo] = useState('');
  const [modalVisible, setModalVisible] = useState(false);

  const handleConsultaDNI = (idPersonal) => {
    // Simulación de consulta a la base de datos
    const person = personal.find(p => p.pers_codigo === idPersonal);
    if (person) {
      setCodigo(person.pers_codigo);
      setNombre(person.pers_nombres);
      setApellido(person.pers_apellidos);
      setDni(person.pers_dni);
      const cargo = cargos.find(c => c.idcargo === person.idcargo);
      if (cargo) {
        setCargo(cargo.cargo);
      }
      // Mostrar el modal para seleccionar acción (asistencia/refrigerio)
      setModalVisible(true);
    } else {
      alert('El ID no está registrado en la base de datos');
    }
  };

  const closeModal = () => {
    setModalVisible(false);
    // Limpiar los datos del usuario
    setCodigo('');
    setNombre('');
    setApellido('');
    setDni('');
    setCargo('');
  };

  return (
    <div className="App">
      <main className="contenedor">
        <SeccionDNI consultarDNI={handleConsultaDNI} />
        <SeccionInformacion
          codigo={codigo}
          nombre={nombre}
          apellido={apellido}
          dni={dni}
          cargo={cargo}
        />
        <SeccionRegistro />
        <SeccionHoraFecha />
      </main>
      <Modal visible={modalVisible} onClose={closeModal} />
    </div>
  );
}

export default App;

2. SeccionDNI.js
import React from 'react';

const SeccionDNI = ({ consultarDNI }) => {
  const handleConsultaDNI = () => {
    const nroDni = document.getElementById('nroDni').value;
    if (nroDni === '') {
      alert('Por favor ingrese el número de DNI.');
      return;
    }
    if (nroDni.length !== 8) {
      alert('El DNI debe contener exactamente 8 dígitos.');
      document.getElementById('nroDni').value = '';
      return false;
    }
    consultarDNI(nroDni);
  };

  const restricText = (event) => {
    let value = event.target.value;
    event.target.value = value.replace(/\D/g, '');
  };

  return (
    <section className="seccion-dni">
      <h2 className="titulo-seccion">Ingresar DNI</h2>
      <div className="contenedor-input">
        <label htmlFor="nroDni">N° DNI</label>
        <input type="tel" id="nroDni" onChange={restricText} />
      </div>
      <div className="grupo-botones">
        <button className="boton-asistencia" onClick={handleConsultaDNI}>
          Asistencia
        </button>
        <button className="boton-refrigerio" onClick={handleConsultaDNI}>
          Refrigerio
        </button>
      </div>
    </section>
  );
};

export default SeccionDNI;

3. SeccionInformacion.js
import React from 'react';

const SeccionInformacion = ({ codigo, nombre, apellido, dni, cargo }) => {
  return (
    <section className="seccion-informacion">
      <h2 className="titulo-seccion">Información del usuario</h2>
      <div className="contenedor-foto">
        <img src="img/foto.png" alt="Foto del usuario" />
      </div>
      <div className="contenedor-datos">
        <article className="dato">
          <label htmlFor="codigo">Código</label>
          <input type="text" id="codigo" value={codigo} disabled />
        </article>
        <article className="dato">
          <label htmlFor="nombre">Nombres</label>
          <input type="text" id="nombre" value={nombre} disabled />
        </article>
        <article className="dato">
          <label htmlFor="apellido">Apellidos</label>
          <input type="text" id="apellido" value={apellido} disabled />
        </article>
        <article className="dato">
          <label htmlFor="dni">DNI</label>
          <input type="text" id="dni" value={dni} disabled />
        </article>
        <article className="dato">
          <label htmlFor="cargo">Cargo</label>
          <input type="text" id="cargo" value={cargo} disabled />
        </article>
      </div>
    </section>
  );
};

export default SeccionInformacion;

4. SeccionRegistro.js
import React from 'react';

const SeccionRegistro = () => {
  return (
    <section className="seccion-registro">
      <h2 className="titulo-seccion">Registro de actividades</h2>
      <div className="contenedor-fecha-horario">
        <label className="etiqueta-fecha">Fecha:</label>
        <input className="entrada-fecha" id="entrada-fecha" disabled value="" />
        <label className="etiqueta-horario">Horario:</label>
        <input className="entrada-horario" disabled value="18:00:00" />
      </div>
      <div className="grupo-botones-registro">
        <button className="boton-registro boton-ingreso-labores inactivo" id="btnIngresoLabores">
          Ingreso labores
        </button>
        <button className="boton-registro boton-ingreso-refrigerio inactivo" id="btnIngresoRefrigerio">
          Ingreso refrigerio
        </button>
        <button className="boton-registro boton-salida-refrigerio inactivo" id="btnSalidaRefrigerio">
          Salida refrigerio
        </button>
        <button className="boton-registro boton-salida-labores inactivo" id="btnSalidaLabores">
          Salida labores
        </button>
      </div>
    </section>
  );
};

export default SeccionRegistro;

5. SeccionHoraFecha.js
import React, { useEffect, useState } from 'react';

const SeccionHoraFecha = () => {
  const [horaActual, setHoraActual] = useState('');
  const [fechaActual, setFechaActual] = useState('');

  useEffect(() => {
    const interval = setInterval(() => {
      const ahora = new Date();
      const opcionesHora = { hour: 'numeric', minute: 'numeric', hour12: true };
      const opcionesFecha = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
      setHoraActual(ahora.toLocaleTimeString('es-ES', opcionesHora));
      setFechaActual(ahora.toLocaleDateString('es-ES', opcionesFecha));
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  return (
    <section className="seccion-hora-fecha">
      <time id="horaActual">{horaActual}</time>
      <time id="fechaActual">{fechaActual}</time>
    </section>
  );
};

export default SeccionHoraFecha;

6. Modal.js
import React from 'react';

const Modal = ({ visible, onClose }) => {
  const handleButtonClick = (accion) => {
    // Lógica para manejar el botón presionado (Ingreso/Salida Labores/Refrigerio)
    console.log('Botón presionado:', accion);
    onClose(); // Cerrar el modal y limpiar detalles
  };

  if (!visible) return null;

  return (
    <div className="modal">
      <div className="modal-contenido">
        <span className="cerrar" onClick={onClose}>&times;</span>
        <section className="seccion-ingresar-salir">
          <div className="grupo-botones-registro modificador-botones">
            <button className="boton-ingreso boton-ingreso-lab" onClick={() => handleButtonClick('ingreso-labores')}>
              Ingreso labores
            </button>
            <button className="boton-ingreso boton-ingreso-ref" onClick={() => handleButtonClick('ingreso-refrigerio')}>
              Ingreso refrigerio
            </button>
            <button className="boton-salida boton-salida-ref" onClick={() => handleButtonClick('salida-refrigerio')}>
              Salida refrigerio
            </button>
            <button className="boton-salida boton-salida-lab" onClick={() => handleButtonClick('salida-labores')}>
              Salida labores
            </button>
          </div>
        </section>
      </div>
    </div>
  );
};

export default Modal;





proyecto-react/
│
├── public/
│   ├── index.html
│   └── ...
│
├── src/
│   ├── components/
│   │   ├── ContenedorPrincipal.jsx
│   │   ├── SeccionDni.jsx
│   │   ├── SeccionInformacion.jsx
│   │   ├── SeccionRegistro.jsx
│   │   ├── SeccionHoraFecha.jsx
│   │   ├── Modal.jsx
│   │   └── DataContext.jsx
│   ├── App.jsx
│   ├── index.jsx
│   └── styles.css
│
└── package.json


ARCHIVO APP
import React from 'react';
import './style.css';
import MarcacionGPEM from './components/MarcacionGPEM';

function App() {
  return (
    <div className="App">
      <MarcacionGPEM />
    </div>
  );
}

export default App;

Componente MarcacionGPEM.jsx

import React, { useState } from 'react';
import SeccionDni from './SeccionDni';
import SeccionInformacion from './SeccionInformacion';
import SeccionRegistro from './SeccionRegistro';
import SeccionHoraFecha from './SeccionHoraFecha';
import Modal from './Modal';
import '../style.css'; // Asegúrate de tener el archivo style.css en tu proyecto

const MarcacionGPEM = () => {
  const [detalleColaborador, setDetalleColaborador] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);

  // Función para consultar el DNI y cargar detalles del colaborador
  const handleConsultarDni = () => {
    const nroDni = document.querySelector('#nroDni').value;
    // VALIDACIONES
    if (nroDni === '') {
      console.log('Por favor ingrese el número de DNI.');
      return;
    }
    if (nroDni.length !== 8) {
      console.log('El DNI debe contener exactamente 8 dígitos.');
      document.querySelector('#nroDni').value = ''; 
      return false;
    }
    // OBTENER EL 'ID' DE COLABORADOR POR DNI
    const idPersonal = getIdByDni(nroDni);
    if (!idPersonal) {
      console.log('El DNI ingresado no existe.');
      document.querySelector('#nroDni').value = ''; 
      return;
    }
    // OBTENER DETALLES DEL COLABORADOR POR SU 'ID' Y LUEGO CARGAR EN FORMULARIO
    const detalleColaborador = getPersonalDetails(idPersonal);
    
    if (detalleColaborador) {
      setDetalleColaborador(detalleColaborador);
      document.getElementById('codigo').value = detalleColaborador.pers_codigo;
      document.getElementById('nombre').value = detalleColaborador.pers_nombres;
      document.getElementById('apellido').value = detalleColaborador.pers_apellidos;
      document.getElementById('dni').value = detalleColaborador.pers_dni;
      document.getElementById('cargo').value = detalleColaborador.cargo;
      setModalVisible(true);
      // Habilitar botones según las marcaciones o el estado del colaborador (implementación futura)
      console.log(detalleColaborador);
    }
  };

  // Función para manejar eventos de botones de asistencia y refrigerio
  const handleButtonClick = (buttonType) => {
    const nroDni = document.querySelector('#nroDni').value.trim();
    if (nroDni === '') {
      console.log('NO SE RECONOCE EL DNI\nVerifique antes de continuar');
      return null;
    }
    
    setModalVisible(true);

    if (buttonType === 'asistencia') {
      toggleButtons('.boton-ingreso-ref', '.boton-salida-ref', false);
      toggleButtons('.boton-ingreso-lab', '.boton-salida-lab', true);
    } 
    if (buttonType === 'refrigerio') {
      toggleButtons('.boton-ingreso-lab', '.boton-salida-lab', false);
      toggleButtons('.boton-ingreso-ref', '.boton-salida-ref', true);
    }
  };

  // Función para obtener detalles del colaborador por su 'ID'
  const getPersonalDetails = (idPersonal) => {
    const person = personal.find(p => p.pers_codigo === idPersonal);
    if (!person) {
      console.log("El ID no está registrado en la base de datos"); 
      return null;
    }
    const cargo = cargos.find(c => c.idcargo === person.idcargo);
    const area = areas.find(a => a.idarea === person.idarea);
    const marcacion = marcaciones.filter(m => m.idpersonal === idPersonal);

    return { 
      ...person,
      cargo: cargo ? cargo.cargo : null,
      area: area ? area.area : null,
      marcaciones: marcacion
    };
  };

  // Función para obtener el 'ID' de colaborador por su DNI
  const getIdByDni = (nroDni) => {
    const person = personal.find(p => p.pers_dni === nroDni);
    return person ? person.pers_codigo : null;
  };

  // Función para manejar el cierre del modal y limpiar detalles del colaborador
  const closeModalAndClearDetails = () => {
    setModalVisible(false);
    clearDetailsPerson(); 
  };

  // Función para limpiar detalles del colaborador
  const clearDetailsPerson = () => {
    document.getElementById('codigo').value = '';
    document.getElementById('nombre').value = '';
    document.getElementById('apellido').value = '';
    document.getElementById('dni').value = '';
    document.getElementById('cargo').value = '';
    document.getElementById('nroDni').value = '';
    document.getElementById('nroDni').focus();
  };

  // Función para agregar lógica de negocio y remover la clase 'hidden' de los botones
  const removeHiddenClass = () => {
    const hiddenButtons = document.querySelectorAll('.hidden');
    hiddenButtons.forEach(button => button.classList.remove('hidden'));
  };

  // Función para agregar el atributo 'disabled' a un elemento
  const setAttributeButton = (id) => {
    document.querySelector(id).setAttribute("disabled", "disabled");
  };

  // Función para manejar el evento de click en los botones del modal
  const handleModalButtonClick = (event) => {
    const buttonId = event.target.id;

    switch (buttonId) {
      case 'modalBtnIngresoLabores':
        let currentDate = document.querySelector("#entrada-fecha");
        currentDate.value = obtenerFechaActualCorta();
        // AGREGAR LÓGICA DE NEGOCIO
        removeInactiveClass("#btnIngresoLabores");
        break;
      case 'modalBtnSalidaLabores':
        // AGREGAR LÓGICA DE NEGOCIO
        removeInactiveClass("#btnSalidaLabores");
        break;
      case 'modalBtnIngresoRefrigerio':
        // AGREGAR LÓGICA DE NEGOCIO
        removeInactiveClass("#btnIngresoRefrigerio");
        break;
      case 'modalBtnSalidaRefrigerio':
        // AGREGAR LÓGICA DE NEGOCIO
        removeInactiveClass("#btnSalidaRefrigerio");
        break;
      default:
        return; // SALIR
    }
    closeModalAndClearDetails();
  };

  // Función para obtener fecha corta de registro de actividades
  const obtenerFechaActualCorta = () => {
    const options = { day: '2-digit', month: '2-digit', year: 'numeric' };
    return new Date().toLocaleDateString('es-ES', options);
  };

  // Función para obtener hora actual en formato AM/PM
  const obtenerHoraActual = () => {
    const ahora = new Date();
    let horas = ahora.getHours();
    let minutos = ahora.getMinutes();
    const ampm = horas >= 12 ? 'p.m.' : 'a.m.';
    horas = horas % 12;
    horas = horas ? horas : 12; // las 0 horas se convierten a 12
    minutos = minutos < 10 ? '0' + minutos : minutos;
    return horas + ':' + minutos + ' ' + ampm;
  };

  // Función para obtener la fecha actual en formato: días de la semana, días, mes y año
  const obtenerFechaActual = () => {
    const opcionesFecha = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    return new Date().toLocaleDateString('es-ES', opcionesFecha);
  };

  // Función para actualizar hora y fecha actual cada segundo
  const actualizarHoraFecha = () => {
    const horaActualElemento = document.getElementById('horaActual');
    const fechaActualElemento = document.getElementById('fechaActual');

    horaActualElemento.textContent = obtenerHoraActual();
    fechaActualElemento.textContent = obtenerFechaActual();
  };

  //


Componente SeccionDni.jsx
import React from 'react';

const SeccionDni = ({ handleConsultarDni }) => {
  return (
    <div className="seccion">
      <label htmlFor="nroDni">Número de DNI:</label>
      <input type="text" id="nroDni" name="nroDni" />
      <button onClick={handleConsultarDni}>Consultar</button>
    </div>
  );
};

export default SeccionDni;


Componente SeccionInformacion.jsx
import React from 'react';

const SeccionInformacion = ({ detalleColaborador }) => {
  return (
    <div className="seccion">
      <h2>Información del Colaborador</h2>
      <label>Código:</label>
      <input type="text" id="codigo" readOnly />
      <label>Nombre:</label>
      <input type="text" id="nombre" readOnly />
      <label>Apellido:</label>
      <input type="text" id="apellido" readOnly />
      <label>DNI:</label>
      <input type="text" id="dni" readOnly />
      <label>Cargo:</label>
      <input type="text" id="cargo" readOnly />
    </div>
  );
};

export default SeccionInformacion;


Componente SeccionRegistro.jsx

import React from 'react';

const SeccionRegistro = ({ handleButtonClick }) => {
  return (
    <div className="seccion">
      <h2>Registro de Marcación</h2>
      <button className="boton-ingreso-lab" onClick={() => handleButtonClick('asistencia')}>Ingreso Laboral</button>
      <button className="boton-salida-lab" onClick={() => handleButtonClick('asistencia')}>Salida Laboral</button>
      <button className="boton-ingreso-ref" onClick={() => handleButtonClick('refrigerio')}>Ingreso Refrigerio</button>
      <button className="boton-salida-ref" onClick={() => handleButtonClick('refrigerio')}>Salida Refrigerio</button>
    </div>
  );
};

export default SeccionRegistro;

Componente SeccionHoraFecha.jsx
import React, { useEffect } from 'react';

const SeccionHoraFecha = () => {
  useEffect(() => {
    const interval = setInterval(() => {
      actualizarHoraFecha();
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  const actualizarHoraFecha = () => {
    const horaActual = obtenerHoraActual();
    const fechaActual = obtenerFechaActual();

    document.getElementById('horaActual').textContent = horaActual;
    document.getElementById('fechaActual').textContent = fechaActual;
  };

  const obtenerHoraActual = () => {
    const ahora = new Date();
    let horas = ahora.getHours();
    let minutos = ahora.getMinutes();
    const ampm = horas >= 12 ? 'p.m.' : 'a.m.';
    horas = horas % 12;
    horas = horas ? horas : 12; // las 0 horas se convierten a 12
    minutos = minutos < 10 ? '0' + minutos : minutos;
    return horas + ':' + minutos + ' ' + ampm;
  };

  const obtenerFechaActual = () => {
    const opcionesFecha = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    return new Date().toLocaleDateString('es-ES', opcionesFecha);
  };

  return (
    <div className="seccion">
      <h2>Hora y Fecha Actual</h2>
      <div>
        <span id="horaActual">{obtenerHoraActual()}</span>
        <span id="fechaActual">{obtenerFechaActual()}</span>
      </div>
    </div>
  );
};

export default SeccionHoraFecha;


Componente Modal.jsx
import React from 'react';

const Modal = ({ visible, handleCloseModal, handleModalButtonClick }) => {
  const modalClass = visible ? 'modal visible' : 'modal';

  return (
    <div className={modalClass}>
      <div className="modal-content">
        <span className="close" onClick={handleCloseModal}>&times;</span>
        <h2>Confirmar Acción</h2>
        <p>¿Estás seguro de realizar esta acción?</p>
        <div className="modal-buttons">
          <button id="modalBtnIngresoLabores" onClick={handleModalButtonClick}>Ingreso Laboral</button>
          <button id="modalBtnSalidaLabores" onClick={handleModalButtonClick}>Salida Laboral</button>
          <button id="modalBtnIngresoRefrigerio" onClick={handleModalButtonClick}>Ingreso Refrigerio</button>
          <button id="modalBtnSalidaRefrigerio" onClick={handleModalButtonClick}>Salida Refrigerio</button>
        </div>
      </div>
    </div>
  );
};

export default Modal;



PROYECTO PRINCIPAL COMPLETO

proyecto-react/
│
├── public/
│   ├── index.html
│   └── ...
│
├── src/
│   ├── components/
│   │   ├── ContenedorPrincipal.jsx
│   │   ├── SeccionDni.jsx
│   │   ├── SeccionInformacion.jsx
│   │   ├── SeccionRegistro.jsx
│   │   ├── SeccionHoraFecha.jsx
│   │   ├── Modal.jsx
│   │   └── DataContext.jsx
│   ├── App.jsx
│   ├── index.jsx
│   └── styles.css
│
└── package.json

 
DataContext.jsx
import React, { createContext, useState } from 'react';

// Objeto con los datos iniciales
const initialData = {
  personal: [
    {
      pers_codigo: 1,
      idcargo: 1,
      idarea: 1,
      pers_nombres: "Fernando Edilberto",
      pers_apellidos: "Hernández Gonzales",
      pers_alias: "fernando",
      pers_dni: "50505050",
      pers_fechaIngreso: "2024-01-01",
      pers_fechaNac: "1980-01-01",
      pers_direccion: "Dirección 100",
      pers_telefono: "989898989",
      pers_telefono2: "979798987",
      pers_fechaCese: "2024-02-10",
      pers_motivoCese: "Solicitud",
      pers_estado: 2,
      pers_nivel: null,
      bib_acceso: 1,
      ccrh: 0,
      pers_actualizacion: null
    },
    {
      pers_codigo: 2,
      idcargo: 2,
      idarea: 1,
      pers_nombres: "Maria Fernanda",
      pers_apellidos: "Perez Lopez",
      pers_alias: "maria",
      pers_dni: "40404040",
      pers_fechaIngreso: "2024-02-01",
      pers_fechaNac: "1988-02-01",
      pers_direccion: "Dirección 200",
      pers_telefono: "979797979",
      pers_telefono2: "960606060",
      pers_fechaCese: "2024-06-10",
      pers_motivoCese: "Solicitud",
      pers_estado: 2,
      pers_nivel: null,
      bib_acceso: 1,
      ccrh: 0,
      pers_actualizacion: null
    }
  ],
  marcaciones: [
    {
      idmarcacion: 1,
      idpersonal: 1,
      idturno: 1,
      fecha: "2024-06-13",
      condicion: 1,
      turnoinicio: "08:00:00",
      turnofinal: "18:00:00",
      programacion1: "2024-06-13 08:00:00",
      programacion2: "2024-06-13 18:00:00",
      asistencia1: null,
      asistencia2: null,
      desayuno1: null,
      desayuno2: null,
      refrigerio1: null,
      refrigerio2: null,
      tecnicosino: 0,
      estado: 0,
      observacion: null,
      ccnivel: 51,
      actualizacion: null,
      gps_direccion: null,
      gps_longitud: null,
      gps_latitud: null
    },
    {
      idmarcacion: 2,
      idpersonal: 2,
      idturno: 1,
      fecha: "2024-06-13",
      condicion: 1,
      turnoinicio: "08:00:00",
      turnofinal: "18:00:00",
      programacion1: "2024-06-13 08:00:00",
      programacion2: "2024-06-13 18:00:00",
      asistencia1: null,
      asistencia2: null,
      desayuno1: null,
      desayuno2: null,
      refrigerio1: null,
      refrigerio2: null,
      tecnicosino: 0,
      estado: 0,
      observacion: null,
      ccnivel: 51,
      actualizacion: null,
      gps_direccion: null,
      gps_longitud: null,
      gps_latitud: null
    }
  ],
  areas: [
    {
      idarea: 1,
      area: "Sistemas",
      estado: 2,
      usuario: null
    },
    {
      idarea: 2,
      area: "Administración",
      estado: 2,
      usuario: null
    }
  ],
  cargos: [
    {
      idcargo: 1,
      idarea: 1,
      cargo: "Programador",
      estado: 2,
      usuario: null
    },
    {
      idcargo: 2,
      idarea: 1,
      cargo: "Analista TI",
      estado: 2,
      usuario: null
    }
  ],
  turnos: [
    {
      idturno: 1,
      turno: "diurno",
      idturnomtn: 0,
      horainicio: "08:00:00",
      horafin: "18:00:00",
      cambiodia: 0,
      tipo: 0,
      bancohrs: 0,
      estado: 2,
      actualizacion: 1
    }
  ]
};

export const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [data, setData] = useState(initialData);

  // Función para actualizar un registro de personal
  const updatePersonal = (codigo, newData) => {
    setData(prevData => ({
      ...prevData,
      personal: prevData.personal.map(persona =>
        persona.pers_codigo === codigo ? { ...persona, ...newData } : persona
      )
    }));
  };

  // Función para agregar una nueva marcación
  const addMarcacion = nuevaMarcacion => {
    setData(prevData => ({
      ...prevData,
      marcaciones: [...prevData.marcaciones, nuevaMarcacion]
    }));
  };

  return (
    <DataContext.Provider value={{ data, updatePersonal, addMarcacion }}>
      {children}
    </DataContext.Provider>
  );
};


**** ContenedorPrincipal.jsx ***

import React, { useState } from 'react';
import SeccionDni from './SeccionDni';
import SeccionInformacion from './SeccionInformacion';
import SeccionRegistro from './SeccionRegistro';
import SeccionHoraFecha from './SeccionHoraFecha';
import Modal from './Modal';

const ContenedorPrincipal = () => {
  const [modalOpen, setModalOpen] = useState(false);

  const openModal = () => {
    setModalOpen(true);
  };

  const closeModal = () => {
    setModalOpen(false);
  };

  return (
    <div className="contenedor">
      <h1>Sistema de Marcación</h1>
      <SeccionDni />
      <SeccionInformacion />
      <SeccionRegistro />
      <SeccionHoraFecha />
      <button onClick={openModal}>Abrir Modal</button>
      <Modal isOpen={modalOpen} onClose={closeModal} />
    </div>
  );
};

export default ContenedorPrincipal;



**** SeccionDni.jsx ****

import React, { useContext } from 'react';
import { DataContext } from './DataContext';

const SeccionDni = () => {
  const { data, updatePersonal } = useContext(DataContext);

  // Función para actualizar el nombre de la persona con código 1
  const actualizarNombre = () => {
    updatePersonal(1, { pers_nombres: 'Nuevo Nombre' });
  };

  return (
    <div>
      <h2>Sección DNI</h2>
      <p>DNI: {data.personal[0].pers_dni}</p>
      <p>Nombres: {data.personal[0].pers_nombres}</p>
      <p>Apellidos: {data.personal[0].pers_apellidos}</p>
      <button onClick={actualizarNombre}>Actualizar Nombre</button>
    </div>
  );
};
export default SeccionDni;


*****SeccionInformacion.jsx****

import React, { useContext } from 'react';
import { DataContext } from './DataContext';

const SeccionInformacion = () => {
  const { data } = useContext(DataContext);

  return (
    <div>
      <h2>Sección Información</h2>
      <p>Dirección: {data.personal[1].pers_direccion}</p>
      <p>Teléfono: {data.personal[1].pers_telefono}</p>
    </div>
  );
};
export default SeccionInformacion;


****** SeccionRegistro.jsx   *****

import React, { useContext } from 'react';
import { DataContext } from './DataContext';

const SeccionRegistro = () => {
  const { data } = useContext(DataContext);

  return (
    <div>
      <h2>Sección Registro</h2>
      <p>Fecha de Ingreso: {data.personal[0].pers_fechaIngreso}</p>
      <p>Fecha de Cese: {data.personal[0].pers_fechaCese}</p>
    </div>
  );
};
export default SeccionRegistro;


**** SeccionHoraFecha.jsx  ****

import React, { useContext } from 'react';
import { DataContext } from './DataContext';

const SeccionHoraFecha = () => {
  const { data } = useContext(DataContext);

  return (
    <div>
      <h2>Sección Hora y Fecha</h2>
      <p>Fecha de Marcación: {data.marcaciones[0].fecha}</p>
      <p>Turno: {data.turnos[0].turno}</p>
    </div>
  );
};

export default SeccionHoraFecha;


**** modal ****

import React from 'react';

const Modal = ({ isOpen, onClose }) => {
  if (!isOpen) return null;

  return (
    <div className="modal">
      <div className="modal-content">
        <span className="close" onClick={onClose}>&times;</span>
        <h2>Modal Title</h2>
        <p>Este es un modal personalizado para mostrar información adicional.</p>
      </div>
    </div>
  );
};

export default Modal;



App.jsx
Este es el componente principal de la aplicación donde se integra el DataProvider y el ContenedorPrincipal.

import React from 'react';
import { DataProvider } from './components/DataContext';
import ContenedorPrincipal from './components/ContenedorPrincipal';

const App = () => {
  return (
    <DataProvider>
      <div className="App">
        <ContenedorPrincipal />
      </div>
    </DataProvider>
  );
};
export default App;


styles.css

/* styles.css */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f0f0f0;
}

.App {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.container {
  max-width: 800px;
  margin: auto;
  padding: 20px;
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1,
h2,
h3 {
  color: #333;
}

p {
  color: #666;
}

/* styles.css */
.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0,0,0,0.4);
}

.modal-content {
  background-color: #fefefe;
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
  max-width: 600px;
  position: relative;
  border-radius: 5px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}




Index.jsx

import React from 'react';
import ReactDOM from 'react-dom';
import './styles.css';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

index.html
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Proyecto React</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>


package.json

{
  "name": "proyecto-react",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}



COMO UTILIZAR RENDER EN React
ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <CounterApp value={10}/>
    </React.StrictMode>
)




import React from 'react';

// Datos
const personal = [
  // los objetos personales aquí...
];

const marcaciones = [
  // los objetos de marcaciones aquí...
];

const areas = [
  // los objetos de áreas aquí...
];

const cargos = [
  // los objetos de cargos aquí...
];

const turnos = [
  // los objetos de turnos aquí...
];

// Componente para listar el personal
const PersonalList = () => {
  return (
    <div>
      <h2>Lista de Personal</h2>
      <ul>
        {personal.map(person => (
          <li key={person.pers_codigo}>
            {person.pers_nombres} {person.pers_apellidos} - DNI: {person.pers_dni}
          </li>
        ))}
      </ul>
    </div>
  );
};

// Componente para listar las marcaciones
const MarcacionesList = () => {
  return (
    <div>
      <h2>Lista de Marcaciones</h2>
      <ul>
        {marcaciones.map(marc => (
          <li key={marc.idmarcacion}>
            ID Personal: {marc.idpersonal}, Fecha: {marc.fecha}, Inicio: {marc.turnoinicio}, Final: {marc.turnofinal}
          </li>
        ))}
      </ul>
    </div>
  );
};

// Componente para listar las áreas
const AreasList = () => {
  return (
    <div>
      <h2>Lista de Áreas</h2>
      <ul>
        {areas.map(area => (
          <li key={area.idarea}>
            {area.area}
          </li>
        ))}
      </ul>
    </div>
  );
};

// Componente para listar los cargos
const CargosList = () => {
  return (
    <div>
      <h2>Lista de Cargos</h2>
      <ul>
        {cargos.map(cargo => (
          <li key={cargo.idcargo}>
            {cargo.cargo}
          </li>
        ))}
      </ul>
    </div>
  );
};

// Componente para listar los turnos
const TurnosList = () => {
  return (
    <div>
      <h2>Lista de Turnos</h2>
      <ul>
        {turnos.map(turno => (
          <li key={turno.idturno}>
            Turno: {turno.turno}, Inicio: {turno.horainicio}, Fin: {turno.horafin}
          </li>
        ))}
      </ul>
    </div>
  );
};

// Componente principal para renderizar todas las listas
const App = () => {
  return (
    <div>
      <PersonalList />
      <MarcacionesList />
      <AreasList />
      <CargosList />
      <TurnosList />
    </div>
  );
}

export default App;







import React, { useState } from 'react';

// Datos
const personal = [
  {
    pers_codigo: 1,
    idcargo: 1,
    idarea: 1,
    pers_nombres: "Fernando Edilberto",
    pers_apellidos: "Hernández Gonzales",
    pers_alias: "fernando",
    pers_dni: "50505050",
    pers_fechaIngreso: "2024-01-01",
    pers_fechaNac: "1980-01-01",
    pers_direccion: "Dirección 100",
    pers_telefono: "989898989",
    pers_telefono2: "979798987",
    pers_fechaCese: "2024-02-10",
    pers_motivoCese: "Solicitud",
    pers_estado: 2,
    pers_nivel: null,
    bib_acceso: 1,
    ccrh: 0,
    pers_actualizacion: null
  },
  {
    pers_codigo: 2,
    idcargo: 2,
    idarea: 1,
    pers_nombres: "Maria Fernanda",
    pers_apellidos: "Perez Lopez",
    pers_alias: "maria",
    pers_dni: "40404040",
    pers_fechaIngreso: "2024-02-01",
    pers_fechaNac: "1988-02-01",
    pers_direccion: "Dirección 200",
    pers_telefono: "979797979",
    pers_telefono2: "960606060",
    pers_fechaCese: "2024-06-10",
    pers_motivoCese: "Solicitud",
    pers_estado: 2,
    pers_nivel: null,
    bib_acceso: 1,
    ccrh: 0,
    pers_actualizacion: null
  }
];

const marcaciones = [
  {
    idmarcacion: 1,
    idpersonal: 1,
    idturno: 1,
    fecha: "2024-06-13",
    condicion: 1,
    turnoinicio: "08:00:00",
    turnofinal: "18:00:00",
    programacion1: "2024-06-13 08:00:00",
    programacion2: "2024-06-13 18:00:00",
    asistencia1: null,
    asistencia2: null,
    desayuno1: null,
    desayuno2: null,
    refrigerio1: null,
    refrigerio2: null,
    tecnicosino: 0,
    estado: 0,
    observacion: null,
    ccnivel: 51,
    actualizacion: null,
    gps_direccion: null,
    gps_longitud: null,
    gps_latitud: null
  },
  {
    idmarcacion: 2,
    idpersonal: 2,
    idturno: 1,
    fecha: "2024-06-13",
    condicion: 1,
    turnoinicio: "08:00:00",
    turnofinal: "18:00:00",
    programacion1: "2024-06-13 08:00:00",
    programacion2: "2024-06-13 18:00:00",
    asistencia1: null,
    asistencia2: null,
    desayuno1: null,
    desayuno2: null,
    refrigerio1: null,
    refrigerio2: null,
    tecnicosino: 0,
    estado: 0,
    observacion: null,
    ccnivel: 51,
    actualizacion: null,
    gps_direccion: null,
    gps_longitud: null,
    gps_latitud: null
  }
];

const areas = [
  {
    idarea: 1,
    area: "Sistemas",
    estado: 2,
    usuario: null
  },
  {
    idarea: 2,
    area: "Administracion",
    estado: 2,
    usuario: null
  }
];

const cargos = [
  {
    idcargo: 1,
    idarea: 1,
    cargo: "Programador",
    estado: 2,
    usuario: null
  },
  {
    idcargo: 2,
    idarea: 1,
    cargo: "Analista TI",
    estado: 2,
    usuario: null
  }
];

const turnos = [
  {
    idturno: 1,
    turno: "diurno",
    idturnomtn: 0,
    horainicio: "08:00:00",
    horafin: "18:00:00",
    cambiodia: 0,
    tipo: 0,
    bancohrs: 0,
    estado: 2,
    actualizacion: 1
  }
];

// FUNCIÓN PARA OBTENER INFO DE COLABORADOR POR SU 'ID'
const getPersonalDetails = (idPersonal) => {
  const person = personal.find(p => p.pers_codigo === idPersonal);
  if (!person) {
    console.log("El ID no está registrado en la base de datos");
    return null;
  }
  const cargo = cargos.find(c => c.idcargo === person.idcargo);
  const area = areas.find(a => a.idarea === person.idarea);
  const marcacion = marcaciones.filter(m => m.idpersonal === idPersonal);

  return {
    ...person,
    cargo: cargo ? cargo.cargo : null,
    area: area ? area.area : null,
    marcaciones: marcacion
  };
};

// Componente para mostrar los detalles de un colaborador
const PersonalDetails = ({ idPersonal }) => {
  const [details, setDetails] = useState(null);

  React.useEffect(() => {
    const personalDetails = getPersonalDetails(idPersonal);
    setDetails(personalDetails);
  }, [idPersonal]);

  if (!details) {
    return <div>No se encontró información para el ID {idPersonal}</div>;
  }

  return (
    <div>
      <h2>Detalles del Colaborador</h2>
      <p><strong>Nombre:</strong> {details.pers_nombres} {details.pers_apellidos}</p>
      <p><strong>DNI:</strong> {details.pers_dni}</p>
      <p><strong>Cargo:</strong> {details.cargo}</p>
      <p><strong>Área:</strong> {details.area}</p>
      <h3>Marcaciones</h3>
      <ul>
        {details.marcaciones.map(marc => (
          <li key={marc.idmarcacion}>
            Fecha: {marc.fecha}, Inicio: {marc.turnoinicio}, Final: {marc.turnofinal}
          </li>
        ))}
      </ul>
    </div>
  );
};

// Componente principal para renderizar todas las listas y los detalles
const App = () => {
  const [selectedId, setSelectedId] = useState(1);

  return (
    <div>
      <h1>Información de Personal</h1>
      <PersonalList />
      <MarcacionesList />
      <AreasList />
      <CargosList />
      <TurnosList />
      <hr />
      <label>
        ID del Colaborador:
        <input type="number" value={selectedId} onChange={e => setSelectedId(Number(e.target.value))} />
      </label>
      <PersonalDetails idPersonal={selectedId} />
    </div>
  );
};

// Componentes adicionales para listar datos
const PersonalList = () => {
  return (
    <div>
      <h2>Lista de Personal</h2>
      <ul>
        {personal.map(person => (
          <li key={person.pers_codigo}>
            {person.pers_nombres} {person.pers_apellidos} - DNI: {person.pers_dni}
          </li>
        ))}
      </ul>
    </div>
  );
};

const MarcacionesList = () => {
  return (
    <div>
      <h2>Lista de Marcaciones</h2>
      <ul>
        {marcaciones.map(marc => (
          <li key={marc.idmarcacion}>
            ID Personal: {marc.idpersonal}, Fecha: {marc.fecha}, Inicio: {marc.turnoinicio}, Final: {marc.turnofinal}
          </li>
        ))}
      </ul>
    </div>
  );
};

const AreasList = () => {
  return (
    <div>
      <h2>Lista de Áreas</h2>
      <ul>
        {areas.map(area => (
          <li key={area.idarea}>
            {area.area}
          </li>
        ))}
      </ul>
    </div>
  );
};

const CargosList = () => {
  return (
    <div>
      <h2>Lista de Cargos</h2>
      <ul>
        {cargos.map(cargo => (
          <li key={cargo.idcargo}>
            {cargo.cargo}
          </li>
        ))}
      </
